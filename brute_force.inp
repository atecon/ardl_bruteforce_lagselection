/*

   Package for brute-force ARDL model/ lag selection by evluating
   all possible lag combinations.

   Written by Jack Lucchetti and Artur Tarassow
*/

function matrix q(scalar k, scalar n)
    matrix ret = {}
    if k == 0
        ret = zeros(1,n)
    elif k == 1
        ret = I(n)
    elif k == n-1
        ret = ones(n,n) - I(n)
    elif k==n
        ret = ones(1,n)
    else
        ret = ( q(k, n-1) ~ 0 ) | (q(k-1, n-1) ~ 1)
    endif

    return ret
end function

function matrix c(scalar maxlag)
    matrix ret = {}
    loop i=0..maxlag --quiet
        ret |= q(i, maxlag)
    endloop
    return ret
end function

function matrix possibilities(matrix maxlags)
    ret = c(maxlags[1])
    loop i=2..rows(maxlags) --quiet
        A = c(maxlags[i])
        n = rows(A)
        B = ret
        ret = {}
        loop j = 1..rows(B) --quiet
            ret |= (ones(n,1) * B[j,]) ~ A
        endloop
    endloop
    printf "\nNumber of combinations: %d\n", rows(ret)
    #stop
    return ret
end function

function matrix bigmat(list X, matrix maxlags,
                       int opt_contemp[0:1:0] "Consider contemporaneous effects: 0=No (only lagged), 1=Yes")
    matrix mX = {X}
    scalar ml = maxc(maxlags)
    matrix ret = {}
    loop i=1..nelem(X) --quiet
        if opt_contemp==0
            ret ~= mlag(mX[,i], seq(1,maxlags[i]))
        elif opt_contemp==1
            ret ~= mlag(mX[,i], seq(0,maxlags[i]))
        endif
    endloop
    return ret[ml+1:,]
end function

function bundle ardl_lageselect (series y "Endogenous level variable",
                                 list X "List of level regressors",
                                 list DET "List of determinstics",
                                 list UX "List of I(0) variables",
      matrix maxlags "Vector of pmax for each X variable",
      int infotype[1:3:1] "1=AIC, 2=BIC, 3=HQC",
      int opt_contemp[0:1:0] "Consider contemporaneous effects: 0=No (only lagged), 1=Yes")

    bundle ARDL = null

    list DY = diff(y)
    matrix BM = bigmat(DY, maxlags, 0)  			# add only lagged effects: Dy(-1 to -p)
    list XUX =  diff(X) UX
    list l_XUX = lags(maxc(maxlags), XUX)
    matrix BM = BM ~ bigmat(XUX, maxlags, opt_contemp)	# add contemporanous effects
    scalar ml = maxc(maxlags)
    matrix P = possibilities(maxlags)
    scalar p = rows(P)
    matrix ess = mshape($huge, p, 1)
    matrix crit = zeros(rows(ess),4)
    matrix Y = {diff(y)}[ml+1:,]				# Endogenous
    matrix Y1 = mlag({y},1,NA)
    Y1 = Y1[ml+2:,]
    matrix X1 = mlag({X},1,NA)
    X1 = X1[ml+2:,]
    matrix D = {DET}[ml+2:,]					# another obs lost due to differencing of Y
    scalar T = rows(Y)
    matrix e
    loop i=1..p --quiet
        matrix mX = D ~ Y1 ~ X1 ~ selifc(BM, P[i,])
        matrix Pi = mols(Y, mX, &e)
        ess[i] = e'e
        crit[i,] = criteria(ess[i], rows(e), cols(mX))
    endloop
    matrix porder = lagprint(P, crit, (1+nelem(XUX)), ml)

    # Generate OLS string
    list ly = y
    VSTR = stringprint(porder, ly, X, UX)

    # Store stuff for the bundle
    ARDL.porder = porder
    ARDL.crit = crit
    ARDL.P = ess
    ARDL.VSTR = VSTR

    return ARDL			#P ~ ess
end function

function matrix lagprint (matrix P,
                          matrix crit,
                          int k "Number of I(0) variables tested",
      int maxlags,
      int infotype[1:3:1] "1=AIC, 2=BIC, 3=HQC")

    scalar imin = iminc(crit[,infotype])
    matrix M = P[imin,]
    matrix M = mshape(M, maxlags, k)
    string rn = ""
    string cn = ""
    loop i=1..cols(M) -q
        rn += "V$i "
    endloop
    colnames(M,rn)
    loop i=1..rows(M) -q
        cn += "Lag_$i "
    endloop
    rownames(M,cn)

    printf "\nMaximum dependent lags: %d (autom. selection\n", maxlags
    if infotype==1
        stmp = "AIC"
    elif infotype==2
        stmp = "BIC"
    elif infotype==3
        stmp = "HQC"
    endif
    printf "Model select. method: %s\n", stmp
    printf "Number of models evaluated: %d\n", rows(P)
    printf "Selected Model: \n" 			# FIXME

    #C = sort(crit[,infotype])
    #gnuplot infotype --with-lines --time-series --matrix=C --output=display

    return M
end function

function string stringprint (matrix M,
                             list ly "Endogenous level variable",
                             list X "List of level regressors",
                             list UX "List of I(0) variables")

    string STR = ""
    string vnameY = ""
    string vnameX = ""

    if sumc(M[,1])>0
        vname = varname(ly)
        loop j=1..rows(M) -q
            eval M[j,1]
            if M[j,1] == 1
                string stmp = sprintf("d_%s(-%d) ", vname, $j)
                vnameY += stmp
            endif
        endloop
    endif

    list XUX = X UX
    string vnameXUX = strsub(varname(X),",", " ") ~ " " ~ strsub(varname(UX),",", " ")
    loop foreach i XUX -q
        if sumc(M[,1+i])>0
            vname = strsplit(vnameXUX,i)
            loop j=1..rows(M) -q
                if M[j,1+i] == 1
                    if inlist(UX,vname)
                        string stmp = sprintf("%s(-%d) ", vname, $j)
                    else
                        string stmp = sprintf("d_%s(-%d) ", vname, $j)
                    endif
                    vnameX += stmp
                endif
            endloop
        endif
    endloop

    STR += vnameY
    STR += vnameX

    return STR
end function
